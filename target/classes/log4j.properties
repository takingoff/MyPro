#根记录器 （关键字rootLogger）只能有一个根记录器但是可以有很多的输出端，达到同时输出到多个地方的效果
	#级别可以不指定但是逗号不能少,否则第一个输出端被当成级别！
	#如果消息级别比输出端指定的级别高或者一样，输出端必定会输出，否则输出端不会输出。
	#ERROR > WARNING >INFO > DEBUG
	#这里的consoleOut被根记录器拥有，因此所有子记录器不需要指定就拥有它了，指定会导致输出重复记录。
log4j.rootLogger =INFO,consoleOut

#输出端设置 
	#定义输出的位置 
log4j.appender.consoleOut=org.apache.log4j.ConsoleAppender
log4j.appender.fileOut=org.apache.log4j.FileAppender
log4j.appender.fileOut.File=C\:\\Users\\LiTang\\Desktop\\result.txt
#log4j.appender.fileOut.File=/opt/logs/mis/mis.log
	#定义输出端级别。fileOut只输出fatal级别及以上级别的信息。
log4j.appender.fileOut.threshold=fatal 
log4j.appender.consoleOut.threshold=WARN 
	#定义输出的布局
log4j.appender.consoleOut.layout=org.apache.log4j.PatternLayout
log4j.appender.fileOut.layout=org.apache.log4j.PatternLayout
	#定义输出的格式
log4j.appender.fileOut.layout.ConversionPattern=%p-%l-%m-(%d{yyyy/MM/dd HH:mm:ss})%n
log4j.appender.consoleOut.layout.ConversionPattern= tangliLogger:%p-%l-%m-(%d{yyyy/MM/dd HH:mm:ss})%n

#子记录器（每个子记录器也可以有多个输出端）（关键字logger）
	#级别可以不指定但是逗号不能少 ,如果没有逗号，第一个输出端会被认为是级别（无法判定该级别就当成是默认级别）！！
	#子的输出端是自己定义的输出端加上父定义的输出端。要避免输出端重复指定。
	#这里不用指定consoleOut，因为它在根记录器中已经被指定了,而自定义的fileOut输出端可以为它单独指定。
log4j.logger.log4 =DEBUG,fileOut 

log4j.logger.subLog= WARN, fileOut
	#未指定的情况下全部继承父的特性。
log4j.logger.subLog.subLog2=FATAL

#如果有个包名叫做log4其中的某个类构建logger时使用自己的class如果发出log那么他的记录器当然会记录上面定义的log4记录器。
#logger.getName()可以看出是他的子。
#以上定义了 一个 根记录器，三个子记录器  ------------注意 subLog.subLog2 是subLog 的子！！！